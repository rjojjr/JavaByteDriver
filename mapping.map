kirchnersolutions.javabyte.driver.common.driver.Connector -> a:
    kirchnersolutions.javabyte.driver.common.driver.User user -> a
    java.lang.String ip -> b
    java.lang.String hostname -> c
    java.lang.String username -> d
    java.math.BigInteger password -> e
    int port -> f
    kirchnersolutions.javabyte.driver.common.driver.ServerClient client -> g
    kirchnersolutions.javabyte.driver.common.utilities.CryptTools databaseObjectFactory$7d8e2a73 -> h
    java.util.concurrent.atomic.AtomicBoolean loggedOn -> i
    void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    boolean connect() -> a
    void logout() -> b
    kirchnersolutions.javabyte.driver.common.driver.DatabaseResults sendTransaction(kirchnersolutions.javabyte.driver.common.driver.Transaction) -> a
    boolean isConnected() -> c
    java.lang.String sendMessage(java.lang.String) -> a
kirchnersolutions.javabyte.driver.common.driver.DatabaseObjectInterface -> b:
    byte getHeader() -> getHeader
kirchnersolutions.javabyte.driver.common.driver.DatabaseResultSerializer -> c:
    void <init>() -> <init>
    byte[] serialize(kirchnersolutions.javabyte.driver.common.driver.DatabaseResults) -> a
    kirchnersolutions.javabyte.driver.common.driver.DatabaseResults deserialize(byte[]) -> a
    byte[] serializeObject(java.lang.Object) -> a
    java.util.List deserializeObject(byte[]) -> c
    java.lang.Object deserializeObject(byte[]) -> b
kirchnersolutions.javabyte.driver.common.driver.DatabaseResults -> kirchnersolutions.javabyte.driver.common.driver.DatabaseResults:
    java.util.List results -> a
    boolean success -> b
    java.lang.String message -> c
    void <init>() -> <init>
    void setResults(java.util.List) -> setResults
    void setSuccess(boolean) -> setSuccess
    void setMessage(java.lang.String) -> setMessage
    java.util.List getResults() -> getResults
    boolean isSuccess() -> isSuccess
    java.lang.String getMessage() -> getMessage
    byte getHeader() -> getHeader
kirchnersolutions.javabyte.driver.common.driver.Field -> d:
    kirchnersolutions.javabyte.driver.common.driver.FieldSerializer fieldSerializer -> a
    java.lang.String name -> b
    java.lang.String value -> c
    java.io.File file -> d
    boolean fileSupplied -> e
    java.lang.String type -> f
    void <init>() -> <init>
    byte getHeader() -> getHeader
kirchnersolutions.javabyte.driver.common.driver.FieldSerializer -> e:
    void <init>() -> <init>
kirchnersolutions.javabyte.driver.common.driver.GeneralSerializer -> f:
    void <init>() -> <init>
kirchnersolutions.javabyte.driver.common.driver.Serializer -> g:
    byte[] serializeObject(java.lang.Object) -> a
    java.lang.Object deserializeObject(byte[]) -> b
kirchnersolutions.javabyte.driver.common.driver.ServerClient -> h:
    java.net.Socket clientSocket -> a
    java.io.PrintWriter out -> b
    java.io.BufferedReader in -> c
    java.util.concurrent.atomic.AtomicBoolean connected -> d
    void <init>() -> <init>
kirchnersolutions.javabyte.driver.common.driver.Transaction -> kirchnersolutions.javabyte.driver.common.driver.Transaction:
    java.util.List select -> j
    java.util.List oldValues -> k
    java.util.List results -> l
    java.util.Map put -> m
    java.util.Map where -> n
    java.util.Map put2 -> o
    java.util.Map where2 -> p
    java.util.List newRows -> q
    java.util.List newRows2 -> r
    java.lang.String operation -> a
    java.lang.String failMessage -> b
    java.lang.String username -> c
    java.math.BigInteger password -> d
    java.math.BigInteger transactionID -> e
    java.math.BigInteger userIndex -> f
    java.lang.Long requestTime -> g
    java.lang.Long finishTime -> h
    java.math.BigInteger howMany -> i
    boolean successfull -> s
    void <init>() -> <init>
    void <init>(java.lang.String,java.math.BigInteger) -> <init>
    void setUsername(java.lang.String) -> setUsername
    void setNewRows(java.util.List) -> setNewRows
    void setNewRows2(java.util.List) -> setNewRows2
    void setHowMany(java.math.BigInteger) -> setHowMany
    void setUserIndex(java.math.BigInteger) -> setUserIndex
    void setPut2(java.util.Map) -> setPut2
    void setWhere2(java.util.Map) -> setWhere2
    void setWhere(java.util.Map) -> setWhere
    void setPut(java.util.Map) -> setPut
    void setOperation(java.lang.String) -> setOperation
    void setRequestTime(java.lang.Long) -> setRequestTime
    void setSelect(java.util.List) -> setSelect
    java.util.List getNewRows() -> a
    java.util.List getNewRows2() -> b
    java.util.Map getPut2() -> c
    java.util.Map getWhere2() -> d
    java.util.List getSelect() -> e
    java.util.Map getPut() -> f
    java.util.Map getWhere() -> g
    byte getHeader() -> getHeader
kirchnersolutions.javabyte.driver.common.driver.TransactionSerializer -> i:
    void <init>() -> <init>
    byte[] serialize(kirchnersolutions.javabyte.driver.common.driver.Transaction) -> a
    byte[] serializeObject(java.lang.Object) -> a
kirchnersolutions.javabyte.driver.common.driver.User -> j:
    java.util.Map details -> a
    void <init>(java.util.Map) -> <init>
    byte getHeader() -> getHeader
kirchnersolutions.javabyte.driver.common.driver.UserSerializer -> k:
    void <init>() -> <init>
kirchnersolutions.javabyte.driver.common.utilities.ByteTools -> kirchnersolutions.javabyte.driver.common.utilities.ByteTools:
    byte[] remainderBytes -> remainderBytes
    int[] modInts -> modInts
    void <init>() -> <init>
    byte[] readBytesFromFile(java.io.File) -> readBytesFromFile
    void writeBytesToFile(java.io.File,byte[]) -> writeBytesToFile
kirchnersolutions.javabyte.driver.common.utilities.CryptTools -> l:
    kirchnersolutions.javabyte.driver.common.driver.UserSerializer userSerializer -> a
    kirchnersolutions.javabyte.driver.common.driver.TransactionSerializer transactionSerializer -> b
    kirchnersolutions.javabyte.driver.common.driver.GeneralSerializer generalSerializer -> c
    kirchnersolutions.javabyte.driver.common.driver.DatabaseResultSerializer databaseResultSerializer -> d
    void <init>() -> <init>
    kirchnersolutions.javabyte.driver.common.driver.DatabaseObjectInterface databaseObjectFactory(byte[]) -> a
    byte[] databaseSerialFactory(kirchnersolutions.javabyte.driver.common.driver.DatabaseObjectInterface) -> a
kirchnersolutions.javabyte.driver.singleclient.SingleClient -> kirchnersolutions.javabyte.driver.singleclient.SingleClient:
    kirchnersolutions.javabyte.driver.common.driver.Connector con -> a
    java.lang.String ip -> b
    java.lang.String hostname -> c
    java.lang.String username -> d
    java.lang.String password -> e
    int port -> f
    kirchnersolutions.javabyte.driver.singleclient.SingleClientConnector connector -> g
    kirchnersolutions.javabyte.driver.singleclient.SingleClient$ConnectorThread connection -> h
    void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void logout() -> logout
    boolean logon() -> logon
    boolean connect() -> a
    boolean connector() -> b
    kirchnersolutions.javabyte.driver.common.driver.DatabaseResults sendCommand(kirchnersolutions.javabyte.driver.common.driver.Transaction) -> sendCommand
    java.lang.String access$100(kirchnersolutions.javabyte.driver.singleclient.SingleClient) -> a
    kirchnersolutions.javabyte.driver.common.driver.DatabaseResults access$200(kirchnersolutions.javabyte.driver.singleclient.SingleClient,kirchnersolutions.javabyte.driver.common.driver.Transaction) -> a
kirchnersolutions.javabyte.driver.singleclient.SingleClient$ConnectorThread -> m:
    java.util.concurrent.atomic.AtomicBoolean running -> a
    java.util.concurrent.atomic.AtomicBoolean run -> f
    java.util.concurrent.atomic.AtomicBoolean processing -> b
    java.util.concurrent.atomic.AtomicBoolean command -> c
    kirchnersolutions.javabyte.driver.common.driver.Transaction transaction -> d
    kirchnersolutions.javabyte.driver.common.driver.DatabaseResults results -> e
    kirchnersolutions.javabyte.driver.singleclient.SingleClient this$0 -> g
    void <init>(kirchnersolutions.javabyte.driver.singleclient.SingleClient) -> <init>
    void run() -> run
    void stopThread() -> a
    void <init>(kirchnersolutions.javabyte.driver.singleclient.SingleClient,byte) -> <init>
kirchnersolutions.javabyte.driver.singleclient.SingleClientConnector -> n:
    void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    boolean connect() -> a
    boolean isConnected() -> c
    java.lang.String sendMessage(java.lang.String) -> a
    void logout() -> b
    kirchnersolutions.javabyte.driver.common.driver.DatabaseResults sendTransaction(kirchnersolutions.javabyte.driver.common.driver.Transaction) -> a
